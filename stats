#!/usr/bin/perl
use utf8;
use Mojolicious::Lite;
use DBI;

app->sessions->cookie_name('stats');

my $host = 'localhost';
my $user = 'username';
my $pass = 'password';
my $table = 'queuelog';
my $helper_table = 'callcenter_statistics';
my $rate_table   = 'callcenter_rating';

helper db => sub {
  my $self = shift;
  my $db = DBI->connect("dbi:Pg:database=asterisk;host=$host", $user, $pass);
  $db->{pg_enable_utf8}=1;
  return $db;
};

helper generate_html => sub {
  my ($self, $res, $type) = @_;

  my $html = '<table class="table table-bordered table-hover table-condensed"><thead><tr><th>Date</th><th>Queue size max</th><th>Queue size avg</th><th>Time in queue max</th>
    <th>Time in queue avg</th><th>Time with agent max</th><th>Time with agent avg</th><th>Responsible agents</th><th>Answered calls</th>
    <th>Abandoned calls</th><th>Abandoned position avg</th><th>Time to abandon a call max</th><th>Time to abandon a call avg</th></tr></thead><tbody>';

  for (my $i=0;$i<=$#{$res};$i++) {
    my $ref  = ${$res}[$i];
    my $d    = ${$ref}[1];
    my $qs_m = ${$ref}[2];
    my $qs_a = ${$ref}[3];
    my $tq_m = ${$ref}[4];
    my $tq_a = ${$ref}[5];
    my $to_m = ${$ref}[6];
    my $to_a = ${$ref}[7];
    my $o    = ${$ref}[8];
    my $c    = ${$ref}[9];
    my $a    = ${$ref}[10] ? ${$ref}[10] : 0;
    my $a_p  = ${$ref}[11] ? ${$ref}[11] : 0;
    my $a_m  = ${$ref}[12];
    my $a_a  = ${$ref}[13];

    if ($type eq 'hour') {
      (my $url = $d) =~ s/\s/_/; $url =~ s/:00$//;
      $html .= "<tr><td><a href='/stats/period/$url'>$d</a></td>";
    }
    elsif ($type eq '10min') {
      (my $url = $d) =~ s/\s/_/; $url =~ s/:00$//;
      $html .= "<tr><td><a href='/stats/period/${url}0'>${d}0</a></td>";
    }
    elsif ($type eq '1min') {
      $html .= "<tr><td>$d</td>";
    }
    else {
      $html .= "<tr><td><a href='/stats/period/$d'>$d</a></td>";
    }

    if (${$res}[$i+1]) {
      $html .= "<td class='".color(${${$res}[$i+1]}[2], $qs_m)."'>$qs_m</td>";
      $html .= "<td class='".color(${${$res}[$i+1]}[3], $qs_a)."'>$qs_a</td>";
      $html .= "<td class='".color(${${$res}[$i+1]}[4], $tq_m)."'>".hms($tq_m)."</td>";
      $html .= "<td class='".color(${${$res}[$i+1]}[5], $tq_a)."'>".hms($tq_a)."</td>";
      $html .= "<td class='".color($to_m, ${${$res}[$i+1]}[6])."'>".hms($to_m)."</td>";
      $html .= "<td class='".color($to_a, ${${$res}[$i+1]}[7])."'>".hms($to_a)."</td>";
      $html .= "<td class='".color($o, ${${$res}[$i+1]}[8])."'>$o</td>";
      $html .= "<td class='".color($c, ${${$res}[$i+1]}[9])."'>$c</td>";
      $html .= "<td class='".color(${${$res}[$i+1]}[10], $a)."'>$a</td>";
      $html .= "<td class='".color(${${$res}[$i+1]}[11], $a_p)."'>$a_p</td>";
      $html .= "<td class='".color(${${$res}[$i+1]}[12], $a_m)."'>".hms($a_m)."</td>";
      $html .= "<td class='".color(${${$res}[$i+1]}[13], $a_a)."'>".hms($a_a)."</td>";
    }
    else {
      $html .= "<td>$qs_m</td><td>$qs_a</td><td>".
      hms($tq_m).
      "</td><td>".
      hms($tq_a).
      "</td><td>".
      hms($to_m).
      "</td><td>".
      hms($to_a).
      "</td><td>$o</td><td>$c</td><td>$a</td><td>$a_p</td><td>".
      hms($a_m).
      "</td><td>".
      hms($a_a).
      "</td>";
    }
    $html .= '</tr>';
  }

  $html .= '</tbody></table>';
  return $html;
};

helper generate_agents => sub {
  my ($self, $res, $type, $time) = @_;
  my $html = '<table class="table table-bordered table-hover table-condensed"><thead><tr><th>Date</th><th>Agent</th><th>Answered calls</th><th>Not answered calls</th>
  <th>Time talking with the subscriber max</th><th>Time talking with the subscriber avg</th><th>All time talking with the subscribers</th>';

  $html .= '<th>Specific time per hour with the subscribers</th><th>Working hours</th>' if $type =~ /month/;
  $html .= '<th>Time in queue</th>' if $time;

  $html .= '</tr></thead><tbody>';

  for (my $i=0;$i<=$#{$res};$i++) {
    my $ref  = ${$res}[$i];
    my $d    = ${$ref}[0];
    my $ag   = ${$ref}[1];
    my $an   = ${$ref}[2];
    my $nan  = ${$ref}[3];
    my $tm   = ${$ref}[4];
    my $ta   = ${$ref}[5];
    my $ts   = ${$ref}[6];
    my $sts  = ${$ref}[7] if $type =~ /month/;
    my $wh   = ${$ref}[8] if $type =~ /month/;

    $d .= ':00' if $type eq 'hour';
    $d .= '0' if $type eq '10min';

    my $p_an = sprintf("%.2f", ($an/($an+$nan))*100 ) if $nan > 0;
    $p_an = 100 if $nan == 0;
    my $p_nan = sprintf("%.2f" , 100 - $p_an);
    my $a_ts = $ta*$an;

    if ($type eq 'months') { $html .= "<td><a href='/stats/agent/period/months/$d'>$d</a></td>"; }
    elsif ($type eq 'days') { $html .= "<td><a href='/stats/agent/period/days/$d'>$d</a></td>"; }
    else { $html .= "<td>$d</td>"; }
    if ($type ne '1min') {
      (my $url = $d) =~ s/ /_/; $url =~ s/:00$//;
      $html .= "<td><a href='/stats/agent/$ag/period/$url'>$ag</a></td>";
    }
    else {
      $html .= "<td>$ag</td>";
    }
    $html .= "<td><em class='deviation' title='Answered calls percent: $p_an'>$an</em></td>".
    "<td class='".color($p_an, 80)."'><em class='deviation' title='Not answered calls percent: $p_nan'>$nan</em></td>".
    "<td class='".color(1800, $tm)."'>".hms($tm)."</td>".
    "<td class='".color(900, $ta)."'>".hms($ta)."</td>".
    "<td>".hms($ts)."</td>";
    $html .= "<td>".hms($sts)."</td>" if $type =~ /month/;
    $html .= "<td>$wh</td>" if $type =~ /month/;
    $html .= '</tr>';
  }

  $html .= '</tbody></table>';
  return $html;
};

helper generate_rate => sub {
  my ($self, $res, $type, $standart) = @_;
  my $html = '<table class="table table-bordered table-hover table-condensed"><thead><tr><th>Date</th>';
  $html .= '<th>Agent</th>' unless $type eq 'cc';
  $html .= '<th>Courtesy</th><th>Advice</th><th>Competence</th>';
  $html .= '<th>Avg rate</th><th># of rates</th>' unless $type eq 'last';
  $html .= '<th>Record</th>' if $type eq 'last';
  $html .= '</tr></thead><tbody>';

  for (my $i=0;$i<=$#{$res};$i++) {
    my $ref = ${$res}[$i];
    my $d   = ${$ref}[0];
    my $ag  = ${$ref}[1];
    my $co  = ${$ref}[2];
    my $ad  = ${$ref}[3];
    my $com = ${$ref}[4];
    my $avg = ${$ref}[5];
    my $cou = ${$ref}[6];

    $html .= "<tr>";

    $html .= "<td>$d</td>";
    $html .= "<td>$ag</td>" unless $type eq 'cc';

    my $message;
    if (length($d) == 7) {
      $message = 'Month deviation ';
    }
    else {
      $message = 'Day deviation ';
    }
    if ($standart) {
      my $dev1 = sprintf("%+.2f", $co-$standart->{$d}->{courtesy});
      my $dev2 = sprintf("%+.2f", $ad-$standart->{$d}->{advice});
      my $dev3 = sprintf("%+.2f", $com-$standart->{$d}->{competence});
      my $alert1 = 'danger'; if ($dev1=~/\+/){$alert1 = 'success'}
      my $alert2 = 'danger'; if ($dev2=~/\+/){$alert2 = 'success'}
      my $alert3 = 'danger'; if ($dev3=~/\+/){$alert3 = 'success'}
      $html .= "<td class='alert-$alert1'><em class='deviation' title='$message$dev1'>$co</em></td>".
      "<td class='alert-$alert2'><em class='deviation' title='$message$dev2'>$ad</em></td>".
      "<td class='alert-$alert3'><em class='deviation' title='$message$dev3'>$com</em></td>";
    }
    else {
      $html .= "<td>$co</td>".
      "<td>$ad</td>".
      "<td>$com</td>";
    }
    if ($type eq 'last') {
      $html .= "<td><a href='http://server.tld/admin/telephony/cdr/$avg/'>Play</a></td>";
    }
    else {
      if ($standart) {
        my $dev = sprintf("%+.2f", $avg-$standart->{$d}->{avg});
        my $alert = 'danger'; if ($dev=~/\+/){$alert = 'success'}
        $html .= "<td class='alert-$alert'><em class='deviation' title='$message$dev'>$avg</em></td>";
      }
      else {
        $html .= "<td>$avg</td>";
      }
      $html .= "<td>$cou</td>";
    }

    $html .= "</tr>";
  }
  $html .= '</tbody></table>';
  return $html;
};

app->secret('quaD9r2Bj84RRpvB8eEXLK7HXb0nGnHbL0gX4IfF');

sub hms($) {
    my $seconds = shift;
    my $h = $seconds/3600;
    my $m = int(($seconds % 3600)/60);
    my $s = int(($seconds % 3600)%60);
    my $result = sprintf("%03d:%02d:%02d", $h,$m,$s);
    $result =~ s/^0//;
    return $result;
}

sub color($$) {
    my ($a, $b) = @_;
    my $color = '';
    $color = 'alert-success' if $a > $b;
    $color = 'alert-danger'  if $a < $b;
    return $color;
}

my $query_hours = "SELECT '#', to_char(date, 'YYYY-MM-DD HH24:MI') AS dat, queue_size_max, queue_size_avg, time_in_queue_max, time_in_queue_avg, time_with_operator_max,
time_with_operator_avg, operators, calls, abandoned, abandon_position_avg, abandon_timeout_max, abandon_timeout_avg FROM $helper_table ORDER BY dat DESC LIMIT 745;";
my $query_days = "SELECT '#',to_char(date, 'YYYY-MM-DD') AS datea,max(queue_size_max),round(avg(queue_size_avg)::decimal,2),max(time_in_queue_max),round(avg(time_in_queue_avg)::decimal,2),
max(time_with_operator_max),round(avg(time_with_operator_avg)::decimal,2),round(avg(operators)::decimal,2),sum(calls),sum(abandoned), round(avg(abandon_position_avg)::decimal,2),
max(abandon_timeout_max),round(avg(abandon_timeout_avg)::decimal,2) FROM $helper_table GROUP BY datea ORDER BY datea DESC LIMIT 120;";
my $query_month = "SELECT '#',to_char(date, 'YYYY-MM') AS datea,max(queue_size_max),round(avg(queue_size_avg)::decimal,2),max(time_in_queue_max),round(avg(time_in_queue_avg)::decimal,2),
max(time_with_operator_max),round(avg(time_with_operator_avg)::decimal,2),round(avg(operators)::decimal,2),sum(calls),sum(abandoned), round(avg(abandon_position_avg)::decimal,2),
max(abandon_timeout_max),round(avg(abandon_timeout_avg)::decimal,2) FROM $helper_table GROUP BY datea ORDER BY datea DESC LIMIT 12;";

get '/stats' => sub {shift->redirect_to('/stats/period/hours')};

get '/stats/period/hours' => sub {
  my $self = shift;
  my $res  = $self->db->selectall_arrayref($query_hours);

  my $table = $self->generate_html($res, 'hour');

  $self->render(template => 'ccenter', name =>'Hourly statistics', msg => $table);
};

get '/stats/period/days' => sub {
  my $self = shift;
  my $res  = $self->db->selectall_arrayref($query_days);

  my $table = $self->generate_html($res);

  $self->render(template => 'ccenter', name =>'Daily statistics', msg => $table);
};

get '/stats/period/months' => sub {
  my $self = shift;
  my $res  = $self->db->selectall_arrayref($query_month);

  my $table = $self->generate_html($res);

  $self->render(template => 'ccenter', name =>'Monthly statistics', msg => $table);
};

get '/stats/period' => sub {shift->redirect_to('/stats')};

get '/stats/period/:date' => sub {
  my $self = shift;
  my $period = $self->param('date');
  my ($format, $select, $name, $ex, $res);

  if ($period =~ /^\d{4}-\d{2}$/) {
    $format = 'YYYY-MM-DD';
    $select = 'YYYY-MM';
    $name = 'Daily statistics';
  }
  elsif($period =~ /^\d{4}-\d{2}-\d{2}$/) {
    $format = 'YYYY-MM-DD HH24:MI';
    $select = 'YYYY-MM-DD';
    $name = 'Hourly statistics';
    $ex = 'hour';
  }
  elsif ($period =~ /^\d{4}-\d{2}-\d{2}_\d{2}$/) {
    $format = 15;
    $select = 13;
    $ex = '10min';
    $name = 'Statistics for 10 minutes';
    $period =~ s/_/ /;
  }
  elsif ($period =~ /^\d{4}-\d{2}-\d{2}_\d{2}:\d{2}$/) {
    $format = 16;
    $select = 15;
    $ex = '1min';
    $name = 'Per-minute statistics';
    $period =~ s/_/ /;
    $period =~ s/0$//;
  }
  else {
    $self->redirect_to('/stats');
  }

  my $q;

  if ($ex !~ /min$/) {
    $q = "SELECT '#',
       to_char(date, '$format') AS dat,
       max(queue_size_max),
       round(avg(queue_size_avg)::decimal,2),
       max(time_in_queue_max),
       round(avg(time_in_queue_avg)::decimal,2),
       max(time_with_operator_max),
       round(avg(time_with_operator_avg)::decimal,2),
       round(avg(operators)::decimal,2),
       sum(calls),
       sum(abandoned),
       round(avg(abandon_position_avg)::decimal, 2),
       max(abandon_timeout_max),
       round(avg(abandon_timeout_avg)::decimal,2)
       FROM $helper_table
       WHERE to_char(date,'$select') = '$period'
       GROUP BY dat
       ORDER BY dat DESC";

    $res  = $self->db->selectall_arrayref($q);
  }
  else {
    $q = "SELECT
                '#',
                COALESCE(a.date, b.date, c.date, d.date) AS date,
                COALESCE(queue_max, '0'), COALESCE(queue_avg, '0'), COALESCE(time_in_queue_max, '0'),
                COALESCE(time_in_queue_avg, '0'), COALESCE(time_with_agent_max, '0'),
                COALESCE(time_with_agent_avg, '0'), COALESCE(agents, '0'), COALESCE(calls, '0'),
                COALESCE(abandoned, '0'), COALESCE(quit_pos_avg, '0'), COALESCE(timeout_max, '0'), COALESCE(timeout_avg, '0')
            FROM
            (
                SELECT
                    substring(time from 1 for $format) as date,
                    max(data3::integer) AS queue_max,
                    round(avg(data3::integer),2) AS queue_avg
                FROM $table WHERE
                      substring(time from 1 for $select) = '$period' AND
                      event = 'ENTERQUEUE' AND queuename = 'internet'
                GROUP BY date
                ORDER BY date DESC
            ) AS a
            FULL JOIN
            (
                SELECT
                    substring(time from 1 for $format) as date,
                    max(data1::integer) AS time_in_queue_max,
                    round(avg(data1::integer), 2) AS time_in_queue_avg,
                    max(data2::integer) AS time_with_agent_max,
                    round(avg(data2::integer), 2) AS time_with_agent_avg
                FROM $table WHERE
                      substring(time from 1 for $select) = '$period' AND
                      (event = 'COMPLETECALLER' OR event = 'COMPLETEAGENT') AND queuename = 'internet'
                GROUP BY date
                ORDER BY date DESC
            ) AS b
            ON a.date = b.date
            FULL JOIN
            (
                SELECT
                    date,
                    count(agent) AS agents,
                    sum(answered) AS calls
                FROM (
                    SELECT
                    substring(time from 1 for $format) as date,
                    agent,
                    count(*) AS answered
                    FROM $table WHERE
                    substring(time from 1 for $select) = '$period' AND
                    (event = 'COMPLETECALLER' OR event = 'COMPLETEAGENT') AND queuename = 'internet'
                    GROUP BY date, agent
                ) AS all_agents
                GROUP BY date
                ORDER BY date DESC
            ) AS c
            ON COALESCE(a.date, b.date) = c.date
            FULL JOIN
            (
                SELECT
                    substring(time from 1 for $format) as date,
                    count(*) AS abandoned,
                    round(avg(data1::integer), 2) AS quit_pos_avg,
                    max(data3::integer) AS timeout_max,
                    round(avg(data3::integer), 2) AS timeout_avg
                FROM $table WHERE
                      substring(time from 1 for $select) = '$period' AND
                      event = 'ABANDON' AND queuename = 'internet'
                GROUP BY date
                ORDER BY date DESC
            ) AS d
            ON COALESCE(a.date, b.date, c.date) = d.date
            ORDER BY date DESC;";
    $res  = $self->db->selectall_arrayref($q);
  }
  my $table = $self->generate_html($res, $ex);
  $self->render(template => 'ccenter', name => $name, msg => $table);
};

get '/stats/agent' => sub {shift->redirect_to('/stats/agent/period/months')};

get '/stats/agent/period/months' => sub {
  my $self = shift;

  my $q = "SELECT datea, b.agent, a_c, na_c, m_t, a_t, s_t, s_t/a_h AS udel, a_h
    FROM (
      SELECT substring(date::text from 1 for 7) AS datea, agent, sum(answered_calls) AS a_c, sum(notanswered_calls) AS na_c,
      max(time_max) AS m_t, round(avg(time_avg)::decimal, 2) AS a_t, sum(time_sum) AS s_t
      FROM callcenter_operators
      GROUP BY datea, agent ORDER BY datea desc, agent
    ) AS b
    FULL JOIN
    (SELECT substring(datea from 1 for 7) as dateb, a.agent AS agent, count(*) AS a_h FROM
      (
        SELECT substring(date::text from 1 for 13) AS datea, agent, sum(answered_calls) AS s
        FROM callcenter_operators
        GROUP BY datea, agent ORDER BY datea desc, agent
      ) AS a
      WHERE (substring(datea from 12 for 2)::integer >= 7 AND a.s > 1)
        OR substring(datea from 12 for 2)::integer < 7
      GROUP BY dateb, a.agent
    ) AS c
    ON (b.agent = c.agent AND b.datea = c.dateb);";

  my $res = $self->db->selectall_arrayref($q);
  my $table = $self->generate_agents($res, 'months');
  my $name = 'Monthly statistics of agents';
  $self->render(template => 'agent', name => $name, msg => $table);
};

get '/stats/agent/period/months/:date' => sub {
  my $self = shift;
  my $period = $self->param('date');
  if ($period =~ /^\d{4}-\d{2}$/) {
    my $q = "SELECT datea, b.agent, a_c, na_c, m_t, a_t, s_t, s_t/a_h AS udel, a_h
      FROM (
        SELECT substring(date::text from 1 for 7) AS datea, agent, sum(answered_calls) AS a_c, sum(notanswered_calls) AS na_c,
        max(time_max) AS m_t, round(avg(time_avg)::decimal, 2) AS a_t, sum(time_sum) AS s_t
        FROM callcenter_operators WHERE substring(date::text from 1 for 7) = '$period'
        GROUP BY datea, agent
      ) AS b
      FULL JOIN
      (SELECT a.agent AS agent, count(*) AS a_h FROM
        (
          SELECT substring(date::text from 1 for 13) AS datea, agent, sum(answered_calls) AS s
          FROM callcenter_operators
          WHERE substring(date::text from 1 for 7) = '$period'
          GROUP BY datea, agent
        ) AS a
        WHERE (substring(datea from 12 for 2)::integer >= 7 AND a.s > 1)
          OR substring(datea from 12 for 2)::integer < 7
        GROUP BY a.agent
      ) AS c
      ON b.agent = c.agent;";

    my $res = $self->db->selectall_arrayref($q);
    my $table = $self->generate_agents($res, 'month');
    my $name = "Statistics of agents for $period";
    $self->render(template => 'agent', name => $name, msg => $table);
  }
  else {
    $self->redirect_to('/stats/agent/period/months');
  }

};

get '/stats/agent/period/days' => sub {
  my $self = shift;

  my $q = "SELECT substring(date::text from 1 for 10) AS datea, agent, sum(answered_calls), sum(notanswered_calls), max(time_max),
    round(avg(time_avg)::decimal, 2), sum(time_sum) FROM callcenter_operators GROUP BY datea, agent ORDER BY datea desc, agent limit 90";

  my $res = $self->db->selectall_arrayref($q);
  my $table = $self->generate_agents($res, 'days');
  my $name = 'Daily statistics of agents';
  $self->render(template => 'agent', name => $name, msg => $table);
};

get '/stats/agent/period/days/:date' => sub {
  my $self = shift;
  my $period = $self->param('date');
  if ($period =~ /^\d{4}-\d{2}-\d{2}$/) {
    my $q = "SELECT substring(date::text from 1 for 10) AS datea, agent, sum(answered_calls), sum(notanswered_calls), max(time_max),
      round(avg(time_avg)::decimal, 2), sum(time_sum) FROM callcenter_operators WHERE substring(date::text from 1 for 10) = '$period'
      GROUP BY datea, agent ORDER BY datea desc, agent";

    my $res = $self->db->selectall_arrayref($q);
    my $table = $self->generate_agents($res, 'day');
    my $name = "Statistics of agents for $period";
    $self->render(template => 'agent', name => $name, msg => $table);
  }
  else {
    $self->redirect_to('/stats/agent/period/days');
  }
};

get '/stats/agent/period/hours' => sub {
  my $self = shift;

  my $q = "SELECT substring(date::text from 1 for 13)||':00' AS datea, agent, sum(answered_calls), sum(notanswered_calls), max(time_max),
    round(avg(time_avg)::decimal, 2), sum(time_sum) FROM callcenter_operators GROUP BY datea, agent ORDER BY datea desc, agent limit 745";

  my $res = $self->db->selectall_arrayref($q);
  my $table = $self->generate_agents($res, 'yet_another_period');
  my $name = 'Hourly statistics of agents';
  $self->render(template => 'agent', name => $name, msg => $table);
};

get '/stats/agent/:agent/period/:date' => sub {
  my $self = shift;
  my $period = $self->param('date');
  my $agent = $self->param('agent');
  my ($format, $select, $ex, $name);

  if ($period =~ /^\d{4}-\d{2}$/) {
    $format = 10;
    $select = 7;
    $ex = 'day';
    $name = "Daily statistics of agent $agent";
  }
  elsif($period =~ /^\d{4}-\d{2}-\d{2}$/) {
    $format = 13;
    $select = 10;
    $name = "Hourly statistics of agent $agent";
    $ex = 'hour';
  }
  elsif ($period =~ /^\d{4}-\d{2}-\d{2}_\d{2}$/) {
    $format = 15;
    $select = 13;
    $ex = '10min';
    $name = "Statistics for 10 minutes of agent $agent";
    $period =~ s/_/ /;
  }
  elsif ($period =~ /^\d{4}-\d{2}-\d{2}_\d{2}:\d{2}$/) {
    $format = 16;
    $select = 15;
    $ex = '1min';
    $name = "Per-minute statistics of agent $agent";
    $period =~ s/_/ /;
    $period =~ s/0$//;
  }
  else {
    $self->redirect_to('/stats');
  }

  my $q = "SELECT substring(date::text from 1 for $format) AS datea, agent, sum(answered_calls), sum(notanswered_calls), max(time_max),
    round(avg(time_avg)::decimal, 2), sum(time_sum) FROM callcenter_operators
    WHERE substring(date::text from 1 for $select) = '$period' and agent = '$agent'
    GROUP BY datea, agent ORDER BY datea desc, agent";

  my $res = $self->db->selectall_arrayref($q);
  my $table = $self->generate_agents($res, $ex);
  $self->render(template => 'agent', name => $name, msg => $table);
};

get '/stats/rate' => sub {shift->redirect_to('/stats/rate/agent/period/months')};

get '/stats/rate/last' => sub {
  my $self = shift;

  my $q = "SELECT substring(time::varchar from 1 for 19), dst, courtesy, advice, competence, cdr_id FROM $rate_table ORDER BY time DESC LIMIT 100";
  my $res = $self->db->selectall_arrayref($q);
  my $table = $self->generate_rate($res, 'last');
  $self->render(template => 'rate', msg => $table);
};

get '/stats/rate/agent/period/days' => sub {
  my $self = shift;

  my $q = "SELECT coalesce(a.date, b.date, c.date) AS date, coalesce(a.dst, b.dst, c.dst) AS agent, coalesce(a.courtesy, '0.00') AS courtesy,
    coalesce(b.advice, '0.00') AS advice, coalesce(c.competence, '0.00') AS competence, round((coalesce(a.courtesy,'0')+coalesce(b.advice,'0')+coalesce(c.competence,'0'))/3, 2) AS avg,
    GREATEST(a.count::int, b.count::int, c.count::int) AS count
    FROM (SELECT substring(time::text from 1 for 10) AS date, dst, round(avg(courtesy::int),2) AS courtesy, count(*) AS count FROM $rate_table
    WHERE time > '2013-08-01 00:00:00' AND courtesy != '-' GROUP BY dst, date ORDER BY date, dst) AS a
    FULL JOIN (SELECT substring(time::text from 1 for 10) AS date, dst, round(avg(advice::int),2) AS advice, count(*) AS count FROM $rate_table
    WHERE time > '2013-08-01 00:00:00' AND advice != '-' GROUP BY dst, date ORDER BY date, dst) AS b ON (a.date = b.date and a.dst=b.dst)
    FULL JOIN (SELECT substring(time::text from 1 for 10) AS date, dst, round(avg(competence::int),2) AS competence,
    count(*) AS count FROM $rate_table WHERE time > '2013-08-01 00:00:00' AND competence != '-' GROUP BY dst, date ORDER BY date, dst) AS c
    ON (b.date = c.date and b.dst=c.dst) ORDER BY date DESC, agent LIMIT 600";

  my $qs = "SELECT coalesce(a.date, b.date, c.date) AS date, coalesce(a.courtesy, '0.00') AS courtesy, coalesce(b.advice, '0.00') AS advice,
    coalesce(c.competence, '0.00') AS competence, round((coalesce(a.courtesy,'0.00')+coalesce(b.advice, '0.00')+coalesce(c.competence, '0.00'))/3, 2) AS avg FROM
    (SELECT substring(time::text from 1 for 10) AS date, round(avg(courtesy::int),2) AS courtesy FROM $rate_table
    WHERE time > '2013-08-01 00:00:00' AND courtesy != '-' GROUP BY date ORDER BY date) AS a FULL JOIN
    (SELECT substring(time::text from 1 for 10) AS date, round(avg(advice::int),2) AS advice FROM $rate_table
    WHERE time > '2013-08-01 00:00:00' AND advice != '-' GROUP BY date ORDER BY date) AS b ON (a.date = b.date) FULL JOIN
    (SELECT substring(time::text from 1 for 10) AS date, round(avg(competence::int),2) AS competence FROM $rate_table
    WHERE time > '2013-08-01 00:00:00' AND competence != '-' GROUP BY date ORDER BY date) AS c ON (b.date = c.date) ORDER BY date DESC LIMIT 600";

  my $res = $self->db->selectall_arrayref($q);
  my $standart = $self->db->selectall_hashref($qs, 'date');
  my $table = $self->generate_rate($res,undef,$standart);
  $self->render(template => 'rate', msg => $table);

};

get '/stats/rate/agent/period/months' => sub {
  my $self = shift;

  my $q = "SELECT coalesce(a.date, b.date, c.date) AS date, coalesce(a.dst, b.dst, c.dst) AS agent, coalesce(a.courtesy, '0.00') AS courtesy,
    coalesce(b.advice, '0.00') AS advice, coalesce(c.competence, '0.00') AS competence,round((coalesce(a.courtesy,'0')+coalesce(b.advice,'0')+coalesce(c.competence,'0'))/3, 2) AS avg,
    GREATEST(a.count::int, b.count::int, c.count::int) AS count
    FROM (SELECT substring(time::text from 1 for 7) AS date, dst, round(avg(courtesy::int),2) AS courtesy, count(*) AS count FROM $rate_table
    WHERE time > '2013-08-01 00:00:00' AND courtesy != '-' GROUP BY dst, date ORDER BY date, dst) AS a
    FULL JOIN (SELECT substring(time::text from 1 for 7) AS date, dst, round(avg(advice::int),2) AS advice, count(*) AS count FROM $rate_table
    WHERE time > '2013-08-01 00:00:00' AND advice != '-' GROUP BY dst, date ORDER BY date, dst) AS b ON (a.date = b.date and a.dst=b.dst)
    FULL JOIN (SELECT substring(time::text from 1 for 7) AS date, dst, round(avg(competence::int),2) AS competence,
    count(*) AS count FROM $rate_table WHERE time > '2013-08-01 00:00:00' AND competence != '-' GROUP BY dst, date ORDER BY date, dst) AS c
    ON (b.date = c.date and b.dst=c.dst) ORDER BY date DESC, agent LIMIT 100";

  my $qs = "SELECT coalesce(a.date, b.date, c.date) AS date, coalesce(a.courtesy, '0.00') AS courtesy, coalesce(b.advice, '0.00') AS advice,
    coalesce(c.competence, '0.00') AS competence, round((coalesce(a.courtesy,'0.00')+coalesce(b.advice, '0.00')+coalesce(c.competence, '0.00'))/3, 2) AS avg FROM
    (SELECT substring(time::text from 1 for 7) AS date, round(avg(courtesy::int),2) AS courtesy FROM $rate_table
    WHERE time > '2013-08-01 00:00:00' AND courtesy != '-' GROUP BY date ORDER BY date) AS a FULL JOIN
    (SELECT substring(time::text from 1 for 7) AS date, round(avg(advice::int),2) AS advice FROM $rate_table
    WHERE time > '2013-08-01 00:00:00' AND advice != '-' GROUP BY date ORDER BY date) AS b ON (a.date = b.date) FULL JOIN
    (SELECT substring(time::text from 1 for 7) AS date, round(avg(competence::int),2) AS competence FROM $rate_table
    WHERE time > '2013-08-01 00:00:00' AND competence != '-' GROUP BY date ORDER BY date) AS c ON (b.date = c.date) ORDER BY date DESC LIMIT 600";

  my $res = $self->db->selectall_arrayref($q);
  my $standart = $self->db->selectall_hashref($qs, 'date');
  my $table = $self->generate_rate($res, undef, $standart);
  $self->render(template => 'rate', msg => $table);

};

get '/stats/rate/cc/period/days' => sub {
  my $self = shift;

  my $q = "SELECT coalesce(a.date, b.date, c.date) AS date, 'agent', coalesce(a.courtesy, '0.00') AS courtesy, coalesce(b.advice, '0.00') AS advice,
    coalesce(c.competence, '0.00') AS competence, round((coalesce(a.courtesy,'0.00')+coalesce(b.advice, '0.00')+coalesce(c.competence, '0.00'))/3, 2) AS avg,
    GREATEST(a.count::int, b.count::int, c.count::int) AS count FROM
    (SELECT substring(time::text from 1 for 10) AS date, round(avg(courtesy::int),2) AS courtesy, count(*) AS count FROM $rate_table
    WHERE time > '2013-08-01 00:00:00' AND courtesy != '-' GROUP BY date ORDER BY date) AS a FULL JOIN
    (SELECT substring(time::text from 1 for 10) AS date, round(avg(advice::int),2) AS advice, count(*) AS count FROM $rate_table
    WHERE time > '2013-08-01 00:00:00' AND advice != '-' GROUP BY date ORDER BY date) AS b ON (a.date = b.date) FULL JOIN
    (SELECT substring(time::text from 1 for 10) AS date, round(avg(competence::int),2) AS competence, count(*) AS count FROM $rate_table
    WHERE time > '2013-08-01 00:00:00' AND competence != '-' GROUP BY date ORDER BY date) AS c ON (b.date = c.date) ORDER BY date DESC LIMIT 600";

  my $res = $self->db->selectall_arrayref($q);
  my $table = $self->generate_rate($res, 'cc');
  $self->render(template => 'rate', msg => $table);
};

get '/stats/rate/cc/period/months' => sub {
  my $self = shift;

  my $q = "SELECT coalesce(a.date, b.date, c.date) AS date, 'agent', coalesce(a.courtesy, '0.00') AS courtesy, coalesce(b.advice, '0.00') AS advice,
    coalesce(c.competence, '0.00') AS competence, round((coalesce(a.courtesy,'0.00')+coalesce(b.advice, '0.00')+coalesce(c.competence, '0.00'))/3, 2) AS avg,
    GREATEST(a.count::int, b.count::int, c.count::int) AS count FROM
    (SELECT substring(time::text from 1 for 7) AS date, round(avg(courtesy::int),2) AS courtesy, count(*) AS count FROM $rate_table
    WHERE time > '2013-08-01 00:00:00' AND courtesy != '-' GROUP BY date ORDER BY date) AS a FULL JOIN
    (SELECT substring(time::text from 1 for 7) AS date, round(avg(advice::int),2) AS advice, count(*) AS count FROM $rate_table
    WHERE time > '2013-08-01 00:00:00' AND advice != '-' GROUP BY date ORDER BY date) AS b ON (a.date = b.date) FULL JOIN
    (SELECT substring(time::text from 1 for 7) AS date, round(avg(competence::int),2) AS competence, count(*) AS count FROM $rate_table
    WHERE time > '2013-08-01 00:00:00' AND competence != '-' GROUP BY date ORDER BY date) AS c ON (b.date = c.date) ORDER BY date DESC LIMIT 100";

  my $res = $self->db->selectall_arrayref($q);
  my $table = $self->generate_rate($res, 'cc');
  $self->render(template => 'rate', msg => $table);
};

app->mode('production');
app->start;

